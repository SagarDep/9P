<project name="0P" default="help">
  <property name="proj" value="9P" />
  <property name="apkplz" value="${proj}-release.apk" />
  <property name="site" location="../tube42.github.io/${proj}" />


  <!-- get base42 in place-->
  <target name="downloaddeps">
    <delete dir="libs" />
    <mkdir dir="libs" />
    <mkdir dir="libs/pc" />

    <!-- update submodules, build them and copy the jars -->
    <exec executable="git" failifexecutionfails="true">
      <arg line="submodule update --init"/>
    </exec>

    <exec executable="git" failifexecutionfails="true">
      <arg line="submodule foreach ant dist"/>
    </exec>

    <copy todir="libs" >
      <fileset dir="submodules/base42" includes="Base42_android_lib.jar"/>
    </copy>

    <copy todir="libs/pc" >
      <fileset dir="submodules/base42" includes="Base42_desktop_*.jar"/>
    </copy>

    <!-- bin -->
    <echo file="libs/pc/hiero" >#!/bin/sh
      java -cp libs/pc/Base42_desktop_lib.jar:libs/pc/Base42_desktop_bin.jar com.badlogic.gdx.tools.hiero.Hiero $*
    </echo>
    <chmod file="libs/pc/hiero" perm="+x"/>

    <echo file="libs/pc/marm" >#!/bin/sh
      java -cp libs/pc/Base42_desktop_lib.jar:libs/pc/Base42_desktop_bin.jar se.tube42.marm.Main $*
    </echo>
    <chmod file="libs/pc/marm" perm="+x"/>

  </target>

  <!-- try to compile assets locallly, set artscompile.failed if it fails -->
  <target name="artscompile">
    <exec executable="make" failifexecutionfails="false" failonerror="false" resultproperty="artscompile.code">
    </exec>
    <condition property="artscompile.failed">
      <not>
        <equals arg1="0" arg2="${artscompile.code}" />
      </not>
    </condition>

    <echo> Tried to compile assets locally, this was the result: ${artscompile.code} </echo>
  </target>


  <!-- download assets and unpack them into the project these are pre-compiled assets.  -->
  <target name="artsdownload" if="artscompile.failed">
    <echo>USING DOWNLOADED ASSETS!</echo>
    <mkdir dir=".dl" />
    
    <get skipexisting="false" src="http://tube42.github.io/${proj}/assets/assets.zip"
      dest=".dl/assets.zip" />
    <unzip src=".dl/assets.zip" dest="./"/>
  </target>

  <!-- setup project for the first time -->
  <target name="setup" depends="downloaddeps,artscompile,artsdownload">
  </target>


  <!-- for desktop -->
  <path id="cp">
    <fileset dir="libs/pc">
      <include name="Base42_desktop_lib.jar"/>
    </fileset>
    <pathelement path="build/"/>
  </path>


  <target name="init_local">
    <tstamp/>
    <mkdir dir="build"/>
  </target>

  <target name="compile_local" depends="init_local" >
    <javac includeantruntime="false" destdir="build">
      <src path="src" />
      <exclude name="se/tube42/*/android/**" />
      <classpath refid="cp" />
    </javac>
  </target>

  <target name="run" depends="compile_local" >
    <java dir="assets" classname="se.tube42.p9.desktop.DesktopMain" fork="yes">
      <classpath refid="cp" />
    </java>

    <delete dir="assets/save" />
  </target>

  <!-- create jar for the desktop -->
  <target name="dist" depends="compile_local" >
    <jar jarfile="libs/pc/app.jar">
      <fileset dir="assets"/>
      <fileset dir="build"/>
      <manifest>
        <attribute name="Main-Class" value="se.tube42.p9.desktop.DesktopMain"/>
      </manifest>
    </jar>

    <zip destfile="${proj}_app.jar">
      <zipgroupfileset dir="libs/pc" includes="Base42_desktop_lib.jar"/>
      <zipgroupfileset dir="libs/pc" includes="app.jar"/>
    </zip>
  </target>

  <!-- check if this is the master branch -->
  <target name="check_master" >
    <exec executable="git" outputproperty="git.branch" failifexecutionfails="true">
      <arg line="rev-parse --abbrev-ref HEAD"/>
    </exec>
    <condition property="is.master">
      <equals arg1="${git.branch}" arg2="master" />
    </condition>
    <echo>Current git branch is ${git.branch}</echo>
  </target>

  <target name="publish" depends="check_master" if="is.master" >
    <!-- compile and save assets -->
    <exec executable="make" failifexecutionfails="true" />
    <zip destfile="${site}/assets/assets.zip" >
      <zipfileset dir="assets" prefix="assets">
        <exclude name="dict/*" />
        <exclude name="progress/" />
        <exclude name="*.zip" />
      </zipfileset>
      <zipfileset dir="res" prefix="res" />
    </zip>

    <!-- build release and save APK-->
    <antcall target="release" />
    <copy file="bin/${apkplz}" todir="${site}/bin"/>

    <!-- add them to git, commit them and finally push the repo-->
    <exec executable="git" dir="${site}">
      <arg line="add bin/${apkplz} assets/assets.zip"/>
    </exec>
    <exec executable="git" dir="${site}">
      <arg line="commit . -m 'published ${apkplz} and assets from custom_rules.xml'"/>
    </exec>
    <exec executable="git" dir="${site}">
      <arg line="push"/>
    </exec>
  </target>

  <target name="clean2"  depends="clean" description="clean up" >
    <delete dir="build"/>
    <delete dir="libs"/>
    <delete dir="bin"/>
  </target>
</project>
